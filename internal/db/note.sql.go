// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: note.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNote = `-- name: CreateNote :one
INSERT INTO note (
    content, created_at, expires_at, expires_at_timezone, key_hash
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, content, created_at, expires_at, expires_at_timezone, key_hash
`

type CreateNoteParams struct {
	Content           string
	CreatedAt         pgtype.Timestamptz
	ExpiresAt         pgtype.Timestamp
	ExpiresAtTimezone string
	KeyHash           []byte
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, createNote,
		arg.Content,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.ExpiresAtTimezone,
		arg.KeyHash,
	)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.ExpiresAtTimezone,
		&i.KeyHash,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM note
WHERE id = $1
`

func (q *Queries) DeleteNote(ctx context.Context, id pgtype.Int8) error {
	_, err := q.db.Exec(ctx, deleteNote, id)
	return err
}

const getNote = `-- name: GetNote :one
SELECT id, content, created_at, expires_at, expires_at_timezone, key_hash
FROM note
WHERE id = $1
`

func (q *Queries) GetNote(ctx context.Context, id pgtype.Int8) (Note, error) {
	row := q.db.QueryRow(ctx, getNote, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.ExpiresAtTimezone,
		&i.KeyHash,
	)
	return i, err
}
